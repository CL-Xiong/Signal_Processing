
% Signal Processing Learning
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
close all; clear all; clc
addpath(genpath(pwd));

% Basic signal processing

%%%%%%%%%%%%%%%%%%%%%%%%
% Signal Control Panel %
%%%%%%%%%%%%%%%%%%%%%%%%

    % Signal 1
        % Signal Properties 
f_1 = 1000;                                 % Frequency
amp_1 = 1;                                  % Amplitude
phase_1 = 0;                                % Initial Phase in Degree
phase_1 = (phase_1*pi)/180;                 % radian conversion
        % Display Properties
npp_1 = 1000;                               % Number of point per period
duration_1 = 0.01;                          % Duration in [Second]
        
    % Signal 2
        % Signal Properties 
f_2 = 1000;                                 % Frequency
amp_2 = 1;                                  % Amplitude
phase_2 = 90;                               % Initial Phase
phase_2 = (phase_2*pi)/180;                 % radian conversion
        % Display Properties
npp_2 = 1000;                               % Number of point per period
duration_2 = 0.01;                          % Duration in [Second]

    % Signal 3
        % Signal Properties 
f_3 = 1000;                                 % Frequency
amp_3 = 1;                                  % Amplitude
phase_3 = 0;                                % Initial Phase
phase_3 = (phase_3*pi)/180;                 % radian conversion
        % Display Properties
npp_3 = 1000;                               % Number of point per period
duration_3 = 0.01;                          % Duration in [Second]

%%%%%%%%%%%%%%%%%%%%%%
% Connexe parameters %
%%%%%%%%%%%%%%%%%%%%%%

    % Signal 1
fs_1 = f_1*npp_1;                           % "sample frequency" equivalent
number_period_1 = duration_1 * f_1;         % number of period
npt_1 = npp_1 * duration_1 * f_1 + 1;       % total number of point

    % Signal 2
fs_2 = f_2*npp_2;                           % "sample frequency" equivalent
number_period_2 = duration_2 * f_2;         % number of period
npt_2 = npp_2 * duration_2 * f_2 + 1;       % total number of point

    % Signal 3
fs_3 = f_3*npp_3;                           % "sample frequency" equivalent
number_period_3 = duration_3 * f_3;         % number of period
npt_3 = npp_3 * duration_3 * f_3 + 1;       % total number of point

%%%%%%%%%%%%%%%%%
% Abscisse Axes %
%%%%%%%%%%%%%%%%%

x1 = linspace(0,duration_1,npt_1);

%%%%%%%%%%%%%%%%%%%%%%
% Signal Calculation %
%%%%%%%%%%%%%%%%%%%%%%

S1 = zeros(1,npt_1);
S2 = zeros(1,npt_2);
S3 = zeros(1,npt_3);
S = zeros(1,npt_1); 

for t = 1:npt_1
    S1(t) = cos(2*pi*f_1*x1(t) - phase_1);
    S2(t) = cos(2*pi*f_2*x1(t) - phase_2);
    S3(t) = cos(2*pi*f_3*x1(t) - phase_3);
    S(t) = S1(t) + S2(t);
end

%%%%%%%%%%%
% Ploting %
%%%%%%%%%%%

hold on
figure(1);
plot(x1,S1);
plot(x1,S2);
plot(x1,S);
legend('S1','S2','S');
%ylim([-2 2]);

%% Evil Wave Form Generator Test

waveform_type = 'ringing';

% Real PRN Generation
PRN_code_number = 1;        % GPS PRN Code Number also Satellite ID
PRN_vector = generateCAcode(PRN_code_number); % *See note end of section
chip_rate = 1023000;             % duration * chip rate = PRN_vector length. 1023 chips
npc = 100;                         % fs = npt/duration
duration = 0.001;               % [s]

% Short PRN-like signal
% PRN_vector = [+1 -1 +1 -1 -1 +1 -1 +1 +1 -1];
% chip_rate = 10;
% npc = 1000;
% duration = 1;

% Calculation
[signal,fs,number_chip,npt] = EvilWaveForm_Generator(waveform_type,PRN_vector,chip_rate,npc,duration );

% Display
x = linspace(0,duration,npt); % returns npt points. 
% Spacing between points = duration/(npt-1)


plot(x,signal);
ylim([-1.5 1.5]);
title_name = ['EWF ' waveform_type ' Signal' ];
title(title_name);
xlabel('Time [s]')
ylabel('Amp')

% PRN code generated by those guys
% The generateCAcode(PRN_code_number) function
% SoftGNSS v3.0
% 
% Copyright (C) Darius Plausinaitis
% Written by Darius Plausinaitis
% Based on Dennis M. Akos, Peter Rinder and Nicolaj Bertelsen

%% Evil Wave Form display facility
%
hold on
figure(1);
plot(x,short_signal,'LineWidth',2,'Color','k','Marker','*');
plot(x,short_signal_shifted,'LineWidth',2,'Color','b');
title('0.5chip-shift Early PRN Replica')
xlabel('Time')
ylabel('Amp')
ylim([-2 2]);
legend('Reference Signal','Early Signal');


figure(2);
diff = short_signal - short_signal_shifted;
plot(x,diff);
ylim([-2.5 2.5]);



%% Fourier Serie Decomposition
% 

% 1 period is 2 chips, ~2 us
% fundamental frequency of such a square signal = chip_rate/2
% But here this is not a periodic signal at the level of the chips
% The real period is the sequence itself
% The Fourier Series decompositions (same for FT) must be applied on the entire period

x1 = linspace(0,0.001,1023001);
period_frequency = 1000; % [Hz] Actual Period of the signal, in the physical sense, is 1000 Hz, as there are 1000 sequences per second

% Fourier Serie Decomposition function call
[signal_approximation,serie_coefs] = FourierSeries(signal,6000,1000);


hold on
figure(1);
plot(x1,signal,'Color','r');
plot(x1,signal_approximation,'Color','b');
title('Evil Wave Form Ringing Effect 6MHz Bandwidth Filter')
xlabel('Time [s]')
ylabel('Amp')

legend('Reference Signal','Distorded Signal');

%% Harmonic Spectrum Visualization
% 
% Spectre d'amplitude et de phase unilateral

% An = sqrt(an^2 + bn^2) = amplitude de l'harmonique (cos + sin)
% Pn = arctan(bn/an)


Amp_spectrum = sqrt(serie_coefs(:,1).^2+serie_coefs(:,2).^2);
Phase_spectrum = atan(serie_coefs(:,2)./serie_coefs(:,1));

x = 1:48001;
subplot(2,1,1);
plot(x,Amp_spectrum);
subplot(2,1,2);
plot(x,Phase_spectrum);

%% Correlation 
% Calculation and plot
signal_x = perfect_signal;
signal_y = perfect_signal;

L = length(signal_x); 
%x_correlation = (-L+1):(L-1);
%x_correlation = -368279:368279;
% Calcul
correlation = correlator( signal_x, signal_y );

% Normalization
correlation = correlation/max(correlation);

% Plot
% plot(x_correlation,correlation);
plot(x_correlation,Corr);
title('PRN Signal Autocorrelation')
xlabel('Tau')
ylabel('Correlation Score')

%% SCB Original
% S-Curve Bias Calculation and plotting
distord_signal_filename = 'D:\Quentin_Leroy\Science_Technology\OneDrive\Documents\RapportECL\Ressources\EWF_Ringing_N12000.mat';
distord_signal = load(distord_signal_filename); % loading distorded signal
reference_signal_filename = 'D:\Quentin_Leroy\Science_Technology\OneDrive\Documents\RapportECL\Ressources\Ideal_PRN_Signal_1000npc.mat';
reference_signal = load(reference_signal_filename); % loading reference signal

% sampling frequency fs = (total number of point) / (signal duration)
% For N = 6000, 12000 and 24000 : fs = 1023001/0.001 = 1023001000
fs = 102301000;
chip_rate = 1023000; % number of chip per second

% scb function used:
% D:\Quentin_Leroy\Science_Technology\SVN_egnos_ecvf\ecvf\kpi\scb.m

[SCB, Early_Late_Spacing,~,~,~,~,~] = scb(EWF_06lag, perfect_signal, fs, chip_rate);

hold on
figure(1);
plot(Early_Late_Spacing,SCB*1e12);
title('S-Curve Bias')
xlabel('Early-Late Spacing [ps]')
ylabel('SCB [ps]')
legend('0.6 duty-cycle','Reference 100pts per chip');


%% Interrogations:
% 
% Superposition of two satellite signals
% Combination at the antenna: BPSK Sinusoid Carrier sum
% After phase to amplitude demodulation, what kind of signal do we get ? 
% How 2 PRN C/A sequence signal can superpose ?

% Reflections on the Fourier Series decomposition
% Is "2/To*integral(s(t)*cos(nwt)) on a period To" a vectorial product?
% Can it be seen as the orthogonal projection of s(t) on the unit vector cos(nwt)?
% (In a certain vectorial space?, which one?)
% Are cos(wt) and cos(2wt) orthogonal?
% That would mean there an infinite number of dimension, as many as
% harmonics


%% Triangular curve try
%


f = 1000;                                 % Frequency
amp = 1;                                  % Amplitude
npp = 1001;                               % Number of point per period
duration = 1;                          % Duration in [Second]

x = linspace(-1.5,duration,npp);             % x axes

xmax = 0.5;                      % max abscisse


y = 0.5*(sawtooth(2*pi*x, xmax) + 1);

plot(x,y)
grid on

%% Triangle on my own
%
vector_early = [0 0 -1 1 0 0 0];
vector_late = [0 0 0 -1 0 0 0];
x = -3:1:3;

hold on
figure(1);
plot(x,vector_early, 'LineWidth',2)
%plot(x,vector_late, 'LineWidth',2)
grid on

%% Stop shitting
% Do it properly

slope_1 = 1;
slope_2 = -1;
offset = 1;

start = -2;
stop = 2;
npt = 1000;

x = linspace(start,stop,npt);

% Initialization
early_curve = zeros(1,npt);
late_curve = early_curve;


% Calculation
early_curve(125:375) = slope_1 * x(125:375) + offset+0.5; % slope 1
early_curve(376:625) = slope_2 * x(376:625) + offset-0.5; % slope 2

late_curve(325:575) = slope_1 * x(325:575) + 0.7; % slope 1
late_curve(576:825) = slope_2 * x(576:825) + 1.3; % slope 2

s_curve = early_curve - late_curve;

hold on;
figure(1);
%plot(x,early_curve,'LineWidth',2);
%plot(x,late_curve,'LineWidth',2);
plot(x,s_curve,'LineWidth',2);
grid on;
title('distorted S-Curve')
xlabel('Temporal shift [chip%]')
ylabel('Correlation score')
%legend('Early Replica','Late Replica');




